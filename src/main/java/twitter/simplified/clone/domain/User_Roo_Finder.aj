/*******************************************************************************
 * Copyright (C) 2012 Jo√£o Antunes
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 ******************************************************************************/
// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package twitter.simplified.clone.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import twitter.simplified.clone.domain.User;

privileged aspect User_Roo_Finder {
    
    public static TypedQuery<User> User.findUsersByUsernameEquals(String username) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE o.username = :username", User.class);
        q.setParameter("username", username);
        return q;
    }
    
    public static TypedQuery<User> User.findUsersByUsernameLikeOrEmailAddressLikeOrFullNameLike(String username, String emailAddress, String fullName) {
        if (username == null || username.length() == 0) throw new IllegalArgumentException("The username argument is required");
        username = username.replace('*', '%');
        if (username.charAt(0) != '%') {
            username = "%" + username;
        }
        if (username.charAt(username.length() - 1) != '%') {
            username = username + "%";
        }
        if (emailAddress == null || emailAddress.length() == 0) throw new IllegalArgumentException("The emailAddress argument is required");
        emailAddress = emailAddress.replace('*', '%');
        if (emailAddress.charAt(0) != '%') {
            emailAddress = "%" + emailAddress;
        }
        if (emailAddress.charAt(emailAddress.length() - 1) != '%') {
            emailAddress = emailAddress + "%";
        }
        if (fullName == null || fullName.length() == 0) throw new IllegalArgumentException("The fullName argument is required");
        fullName = fullName.replace('*', '%');
        if (fullName.charAt(0) != '%') {
            fullName = "%" + fullName;
        }
        if (fullName.charAt(fullName.length() - 1) != '%') {
            fullName = fullName + "%";
        }
        EntityManager em = User.entityManager();
        TypedQuery<User> q = em.createQuery("SELECT o FROM User AS o WHERE LOWER(o.username) LIKE LOWER(:username)  OR LOWER(o.emailAddress) LIKE LOWER(:emailAddress)  OR LOWER(o.fullName) LIKE LOWER(:fullName)", User.class);
        q.setParameter("username", username);
        q.setParameter("emailAddress", emailAddress);
        q.setParameter("fullName", fullName);
        return q;
    }
    
}
